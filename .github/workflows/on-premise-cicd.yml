# 워크플로우 이름
name: on-premise-cicd

# 수동 실행 트리거 정의
on:
  workflow_dispatch:  # GitHub UI에서 수동 실행 가능하도록 설정
    inputs:
      tags:
        description: 'Set Tags Name'  # 태그 설명
        required: true  # 필수 입력값
        default: main  # 기본값으로 main 사용

jobs:
  # 빌드 작업 정의
  build:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    outputs:
      release: ${{ steps.set-version.outputs.VERSION_NAME }}  # set-version 스텝의 결과를 release로 전달

    steps:
      - id: set-version  # 버전 문자열의 '.'을 '-'로 변환
        run: |
          echo "VERSION_NAME=$(echo "${{ github.event.inputs.tags }}" | sed "s/\./\-/g")" >> $GITHUB_OUTPUT

      - name: Check Version Name  # 버전 이름 확인 출력
        run: |
          echo "Check Version -> ${{ steps.set-version.outputs.VERSION_NAME }}"

      - name: Checkout Source Code  # Git 저장소에서 코드 가져오기
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tags }}

      - name: Setup JDK 21  # 자바 개발 환경 설정
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'microsoft'  # 또는 'temurin' 사용 가능

      - name: Build with Maven  # Maven으로 프로젝트 빌드
        run: mvn clean package -DskipTests -Dmaven.test.skip=true

      - name: Add version to JAR  # 결과 JAR에 버전명 부여
        run: |
          JAR_NAME=$(ls target/*.jar | grep -v 'original' | head -n 1)
          cp "$JAR_NAME" "target/cicd-${{ steps.set-version.outputs.VERSION_NAME }}.jar"

      - name: Upload Artifact  # 빌드 결과물 업로드
        uses: actions/upload-artifact@v4
        with:
          name: cicd-application
          path: target/cicd-${{ steps.set-version.outputs.VERSION_NAME }}.jar

  # 배포 작업 정의 (선택적으로 사용)
#  deploy:
#    runs-on: ubuntu-latest
#    needs:
#      - build
#
#    steps:
#      - name: Download Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: cicd-application
#          path: target/
#
#      - name: Deploy to EC2
#        run: |
#          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
#          chmod 600 private_key.pem
#          scp -i private_key.pem -o StrictHostKeyChecking=no \
#            target/cicd-${{ needs.build.outputs.release }}.jar \
#            ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER_NAME }}/cicd-${{ needs.build.outputs.release }}.jar
#          ssh -i private_key.pem -o StrictHostKeyChecking=no \
#            ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }} \
#            "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USER_NAME }}/cicd-${{ needs.build.outputs.release }}.jar > app.log 2>&1 &"
#          rm -f private_key.pem