# 워크플로우 이름
name: on-premise-cicd

# 수동 실행 트리거 정의
#on:
#  workflow_dispatch:  # GitHub UI에서 수동 실행 가능하도록 설정
#    inputs:
#      tags:
#        description: 'Set Tags Name'  # 태그 설명
#        required: true  # 필수 입력값
#        default: master  # 기본값으로 master 사용
on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      tags:
        description: 'Set Tags Name'
        required: false


jobs:
  # 빌드 작업 정의
  build:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    outputs:
      release: ${{ steps.set-version.outputs.VERSION_NAME }}  # set-version 스텝의 결과를 release로 전달

    steps:
      - id: set-version  # 버전 문자열의 '.'을 '-'로 변환
        run: |
          echo "VERSION_NAME=$(echo "${{ github.event.inputs.tags }}" | sed "s/\./\-/g")" >> $GITHUB_OUTPUT

      - name: Check Version Name  # 버전 이름 확인 출력
        run: |
          echo "Check Version -> ${{ steps.set-version.outputs.VERSOIN_NAME }}"

      - name: Checkout Source Code  # Git 저장소에서 코드 가져오기
        uses: actions/checkout@v4  # GitHub Actions 공식 체크아웃 액션 사용
        with:
          ref: '${{ github.event.inputs.tags }}'  # 입력받은 태그 기준으로 코드 체크아웃

      - name: Grant execute permission for gradlew  # gradlew에 쓰기 권한 부여
        run: chmod +w gradlew  # 일반적으로는 chmod +x 사용이 더 적절함

      - name: Setup JDK 21  # 자바 개발 환경 설정
        uses: actions/setup-java@v4  # 공식 자바 설정 액션
        with:
          java-version: ms21  # 사용할 자바 버전
          distribution: 'temurin'  # Temurin 배포판 사용

      - name: Build with Gradlew  # Gradle로 프로젝트 빌드 및 테스트
        run: ./gradlew clean test bootJar  # 테스트 포함 빌드 수행

      - name: Add version  # 결과 JAR에 버전명 부여
        run: |
          mv build/libs/cicd-0.0.1-SNAPSHOT.jar build/libs/cicd-${{ steps.set-version.outputs.VERSION_NAME }}.jar

      - name: Upload Artifact  # JAR 파일 업로드
        uses: actions/upload-artifact@v4  # GitHub Actions 내 저장용
        with:
          name: cicd-application  # 업로드 이름 설정
          path: build/libs/cicd-${{ steps.set-version.outputs.VERSION_NAME }}.jar  # 업로드할 파일 경로

  # 배포 작업 정의
#  deploy:
#    runs-on: ubuntu-latest  # 동일하게 Ubuntu 환경 사용
#    needs:
#      - build  # build job 완료 후 실행됨.
#
#    steps:
#      - name: Download Artifact  # 빌드 결과 다운로드.
#        uses: actions/download-artifact@v4  # 아티팩트 다운로드 액션 사용
#        with:
#          name: cicd-application  # 빌드 단계에서 지정한 이름
#          path: build/libs/  # 저장할 경로
#
#      - name: Deploy to EC2  # EC2 서버에 JAR 배포 및 실행
#        run: |
#          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem  # SSH 키 파일 생성
#          chmod 600 private_key.pem  # 키 파일 접근 권한 설정
#          scp -i private_key.pem -o StrictHostKeyChecking=no \
#            build/libs/cicd-${{ needs.build.outputs.release }}.jar \
#            ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER_NAME }}/cicd-${{ needs.build.outputs.release }}.jar  # EC2에 JAR 파일 복사
#          ssh -i private_key.pem -o StrictHostKeyChecking=no \
#            ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST }} \
#            "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USER_NAME }}/cicd-${{ needs.build.outputs.release }}.jar > app.log 2>&1 &"  # 기존 프로세스 종료 및 재실행
#          rm -f private_key.pem  # 키 파일 삭제 (보안 처리)